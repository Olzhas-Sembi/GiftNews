#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ–¥–∏–∞ –∏–∑ Telegram –ø–æ—Å—Ç–æ–≤
"""

import asyncio
import sys
import os
import requests
from urllib.parse import urlparse

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä—É
sys.path.append(os.path.join(os.path.dirname(__file__), 'server'))

from server.parsers.telegram_news_service import TelegramNewsService

async def test_media_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ–¥–∏–∞ –∏–∑ Telegram –ø–æ—Å—Ç–æ–≤"""
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ–¥–∏–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ @nextgen_NFT...")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
    service = TelegramNewsService()
    
    try:
        # –ü–∞—Ä—Å–∏–º –∫–∞–Ω–∞–ª
        posts = await service.fetch_telegram_channel('nextgen_NFT')
        
        print(f"\n‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–¥–∏–∞
        media_stats = {}
        media_posts = []
        
        for i, post in enumerate(posts):
            if post.get('media'):
                media_type = post['media']['type']
                media_stats[media_type] = media_stats.get(media_type, 0) + 1
                media_posts.append((i+1, post))
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–¥–∏–∞:")
        for media_type, count in media_stats.items():
            print(f"   {media_type}: {count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç–æ–≤ —Å –º–µ–¥–∏–∞
        print(f"\nüì∏ –ü–æ—Å—Ç—ã —Å –º–µ–¥–∏–∞:")
        for post_num, post in media_posts[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            media = post['media']
            print(f"\nüìù –ü–æ—Å—Ç #{post_num}:")
            print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {post['title'][:50]}...")
            print(f"   –¢–∏–ø –º–µ–¥–∏–∞: {media['type']}")
            print(f"   URL: {media['url']}")
            if media.get('thumbnail'):
                print(f"   Thumbnail: {media['thumbnail']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if media['type'] == 'photo' and media['url']:
                try:
                    response = requests.head(media['url'], timeout=5)
                    if response.status_code == 200:
                        print(f"   ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ")
                    else:
                        print(f"   ‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ URL —Ñ–æ—Ä–º–∞—Ç—ã
        print(f"\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ URL —Ñ–æ—Ä–º–∞—Ç–æ–≤:")
        test_urls = [
            "https://t.me/nextgen_NFT/321",
            "https://cdn4.telegram-cdn.org/file/321.jpg",
            "https://cdn4.telegram-cdn.org/file/321.jpg?size=w"
        ]
        
        for url in test_urls:
            try:
                response = requests.head(url, timeout=5)
                print(f"   {url}: {'‚úÖ' if response.status_code == 200 else '‚ùå'} (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
            except Exception as e:
                print(f"   {url}: ‚ùå –û—à–∏–±–∫–∞: {e}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–¥–∏–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_media_parsing()) 