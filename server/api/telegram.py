#!/usr/bin/env python3
"""
API endpoints –¥–ª—è Telegram Bot
"""

import logging
from typing import Dict, Any
from fastapi import APIRouter, Request, HTTPException
from pydantic import BaseModel
from server.bot import bot

logger = logging.getLogger(__name__)
router = APIRouter()

class TelegramUpdate(BaseModel):
    update_id: int
    message: Dict[str, Any] = None
    callback_query: Dict[str, Any] = None

@router.post("/webhook")
async def telegram_webhook(update: TelegramUpdate):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook: {update.update_id}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        if update.message:
            await handle_message(update.message)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (–∫–Ω–æ–ø–∫–∏)
        elif update.callback_query:
            await handle_callback_query(update.callback_query)
        
        return {"status": "ok"}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

async def handle_message(message: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        chat_id = message.get("chat", {}).get("id")
        text = message.get("text", "")
        
        if not chat_id:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å chat_id")
            return
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {text}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if text.startswith("/"):
            command_parts = text.split()
            command = command_parts[0]
            args = command_parts[1:] if len(command_parts) > 1 else []
            
            bot.handle_command(chat_id, command, args)
        else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            response_text = """
ü§ñ <b>Gift Propaganda News Bot</b>

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π:

üì∞ <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/news - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
/nft - –ù–æ–≤–æ—Å—Ç–∏ NFT
/crypto - –ö—Ä–∏–ø—Ç–æ –Ω–æ–≤–æ—Å—Ç–∏
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –ü–æ–º–æ—â—å

–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç!
"""
            bot.send_message(chat_id, response_text)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def handle_callback_query(callback_query: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏)"""
    try:
        chat_id = callback_query.get("message", {}).get("chat", {}).get("id")
        data = callback_query.get("data")
        
        if not chat_id or not data:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å chat_id –∏–ª–∏ data –∏–∑ callback_query")
            return
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback query –æ—Ç {chat_id}: {data}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ callback data
        if data == "news":
            text = bot.get_news_summary(5)
            bot.send_message(chat_id, text)
            
        elif data == "nft":
            text = bot.get_news_by_category("nft", 5)
            bot.send_message(chat_id, text)
            
        elif data == "crypto":
            text = bot.get_news_by_category("crypto", 5)
            bot.send_message(chat_id, text)
            
        elif data == "stats":
            text = bot.get_news_stats()
            bot.send_message(chat_id, text)
            
        elif data.startswith("news_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
            try:
                news_id = int(data.split("_")[1])
                bot.send_news_with_media(chat_id, news_id)
            except (ValueError, IndexError):
                bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏")
        
        else:
            bot.send_message(chat_id, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback query: {e}")

@router.get("/bot-info")
async def get_bot_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
    try:
        import requests
        from server.config import TOKEN
        
        url = f"https://api.telegram.org/bot{TOKEN}/getMe"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            bot_info = response.json()
            return {
                "status": "ok",
                "bot_info": bot_info.get("result", {}),
                "webhook_url": f"{bot_info.get('result', {}).get('username', 'unknown')} bot"
            }
        else:
            return {
                "status": "error",
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")
        return {
            "status": "error",
            "message": str(e)
        }

@router.post("/send-news")
async def send_news_to_chat(chat_id: int, news_id: int = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç"""
    try:
        if news_id:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
            success = bot.send_news_with_media(chat_id, news_id)
        else:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
            text = bot.get_news_summary(3)
            success = bot.send_message(chat_id, text)
        
        return {
            "status": "ok" if success else "error",
            "chat_id": chat_id,
            "news_id": news_id
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return {
            "status": "error",
            "message": str(e)
        } 