#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è Gift Propaganda News
"""

import logging
import requests
from typing import Dict, List, Optional
from server.config import TOKEN, WEBHOOK_URL
from server.db import get_db_session
from server.db import NewsItem, NewsSource
from sqlalchemy.orm import Session
from sqlalchemy import func

logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self):
        self.token = TOKEN
        self.base_url = f"https://api.telegram.org/bot{self.token}"
        
    def send_message(self, chat_id: int, text: str, parse_mode: str = "HTML") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            url = f"{self.base_url}/sendMessage"
            data = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": parse_mode
            }
            response = requests.post(url, json=data, timeout=10)
            return response.status_code == 200
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def send_photo(self, chat_id: int, photo_url: str, caption: str = "", parse_mode: str = "HTML") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –≤ Telegram"""
        try:
            url = f"{self.base_url}/sendPhoto"
            data = {
                "chat_id": chat_id,
                "photo": photo_url,
                "caption": caption,
                "parse_mode": parse_mode
            }
            response = requests.post(url, json=data, timeout=10)
            return response.status_code == 200
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            return False
    
    def send_media_group(self, chat_id: int, media: List[Dict]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä—É–ø–ø—ã –º–µ–¥–∏–∞ –≤ Telegram"""
        try:
            url = f"{self.base_url}/sendMediaGroup"
            data = {
                "chat_id": chat_id,
                "media": media
            }
            response = requests.post(url, json=data, timeout=10)
            return response.status_code == 200
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—ã: {e}")
            return False
    
    def send_inline_keyboard(self, chat_id: int, text: str, keyboard: List[List[Dict]]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
        try:
            url = f"{self.base_url}/sendMessage"
            data = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": "HTML",
                "reply_markup": {
                    "inline_keyboard": keyboard
                }
            }
            response = requests.post(url, json=data, timeout=10)
            return response.status_code == 200
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
            return False
    
    def get_news_summary(self, limit: int = 5) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            with get_db_session() as session:
                news_items = session.query(NewsItem).order_by(NewsItem.publish_date.desc()).limit(limit).all()
                
                if not news_items:
                    return "üì∞ –ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç"
                
                summary = f"üì∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(news_items)} –Ω–æ–≤–æ—Å—Ç–µ–π:</b>\n\n"
                
                for i, news in enumerate(news_items, 1):
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
                    title = news.title[:50] + "..." if len(news.title) > 50 else news.title
                    source = news.source.name if news.source else "Unknown"
                    category = news.category or "general"
                    
                    summary += f"{i}. <b>{title}</b>\n"
                    summary += f"   üìç {source} | #{category}\n"
                    summary += f"   üìÖ {news.publish_date.strftime('%d.%m.%Y %H:%M')}\n\n"
                
                return summary
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π"
    
    def get_news_by_category(self, category: str, limit: int = 5) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            with get_db_session() as session:
                news_items = session.query(NewsItem).filter(
                    NewsItem.category == category
                ).order_by(NewsItem.publish_date.desc()).limit(limit).all()
                
                if not news_items:
                    return f"üì∞ –ù–æ–≤–æ—Å—Ç–µ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ #{category} –ø–æ–∫–∞ –Ω–µ—Ç"
                
                summary = f"üì∞ <b>–ù–æ–≤–æ—Å—Ç–∏ #{category}:</b>\n\n"
                
                for i, news in enumerate(news_items, 1):
                    title = news.title[:50] + "..." if len(news.title) > 50 else news.title
                    source = news.source.name if news.source else "Unknown"
                    
                    summary += f"{i}. <b>{title}</b>\n"
                    summary += f"   üìç {source}\n"
                    summary += f"   üìÖ {news.publish_date.strftime('%d.%m.%Y %H:%M')}\n\n"
                
                return summary
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π #{category}"
    
    def get_news_stats(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            with get_db_session() as session:
                total_news = session.query(NewsItem).count()
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                categories = session.query(NewsItem.category, func.count(NewsItem.id)).group_by(NewsItem.category).all()
                
                stats = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π:</b>\n\n"
                stats += f"üì∞ –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: <b>{total_news}</b>\n\n"
                
                if categories:
                    stats += "üìà –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
                    for category, count in categories:
                        if category:
                            stats += f"   #{category}: <b>{count}</b>\n"
                
                # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                recent_sources = session.query(NewsSource).filter(NewsSource.is_active == True).limit(5).all()
                if recent_sources:
                    stats += f"\nüì° –ê–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: <b>{len(recent_sources)}</b>\n"
                    for source in recent_sources:
                        stats += f"   ‚Ä¢ {source.name}\n"
                
                return stats
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
    
    def send_news_with_media(self, chat_id: int, news_id: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏ —Å –º–µ–¥–∏–∞"""
        try:
            with get_db_session() as session:
                news = session.query(NewsItem).filter(NewsItem.id == news_id).first()
                
                if not news:
                    self.send_message(chat_id, "‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return False
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏
                text = f"üì∞ <b>{news.title}</b>\n\n"
                
                if news.content_html:
                    # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –¥–ª—è Telegram
                    import re
                    clean_content = re.sub(r'<[^>]+>', '', news.content_html)
                    text += f"{clean_content[:500]}...\n\n" if len(clean_content) > 500 else f"{clean_content}\n\n"
                elif news.content:
                    text += f"{news.content[:500]}...\n\n" if len(news.content) > 500 else f"{news.content}\n\n"
                
                text += f"üìç –ò—Å—Ç–æ—á–Ω–∏–∫: {news.source.name if news.source else 'Unknown'}\n"
                text += f"üìÖ –î–∞—Ç–∞: {news.publish_date.strftime('%d.%m.%Y %H:%M')}\n"
                text += f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: #{news.category or 'general'}\n"
                
                if news.link:
                    text += f"üîó <a href='{news.link}'>–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>"
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ
                if news.media and isinstance(news.media, list) and len(news.media) > 0:
                    media_item = news.media[0]
                    if media_item.get('type') == 'photo' and media_item.get('url'):
                        return self.send_photo(chat_id, media_item['url'], text)
                
                # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                return self.send_message(chat_id, text)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
            return False
    
    def handle_command(self, chat_id: int, command: str, args: List[str] = None) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        try:
            if command == "/start":
                welcome_text = """
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Gift Propaganda News Bot!</b>

üì∞ –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∞—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ @nextgen_NFT –∏ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/news - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
/nft - –ù–æ–≤–æ—Å—Ç–∏ NFT
/crypto - –ö—Ä–∏–ø—Ç–æ –Ω–æ–≤–æ—Å—Ç–∏
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –ü–æ–º–æ—â—å

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–æ–≤–æ—Å—Ç—è–º!
"""
                keyboard = [
                    [{"text": "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", "callback_data": "news"}],
                    [{"text": "üñºÔ∏è NFT", "callback_data": "nft"}, {"text": "‚Çø –ö—Ä–∏–ø—Ç–æ", "callback_data": "crypto"}],
                    [{"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "stats"}]
                ]
                return self.send_inline_keyboard(chat_id, welcome_text, keyboard)
            
            elif command == "/news":
                text = self.get_news_summary(5)
                return self.send_message(chat_id, text)
            
            elif command == "/nft":
                text = self.get_news_by_category("nft", 5)
                return self.send_message(chat_id, text)
            
            elif command == "/crypto":
                text = self.get_news_by_category("crypto", 5)
                return self.send_message(chat_id, text)
            
            elif command == "/stats":
                text = self.get_news_stats()
                return self.send_message(chat_id, text)
            
            elif command == "/help":
                help_text = """
‚ùì <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/news - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
/nft - –ù–æ–≤–æ—Å—Ç–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ NFT
/crypto - –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π

<b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b>
–ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

<b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</b>
‚Ä¢ @nextgen_NFT - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª
‚Ä¢ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏: VC.ru, CoinDesk, Cointelegraph, Habr NFT

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
"""
                return self.send_message(chat_id, help_text)
            
            else:
                return self.send_message(chat_id, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
            return self.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = TelegramBot() 