// –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
async function testFrontendData() {
    try {
        console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...');
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
        const response = await fetch('http://localhost:8000/api/news/?limit=5');
        const data = await response.json();
        
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π:', data.data.length);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–∏–∞ –≤ –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ—Å—Ç–∏
        data.data.forEach((item, index) => {
            const media = item.media || [];
            console.log(`üì∞ –ù–æ–≤–æ—Å—Ç—å #${index + 1} (ID: ${item.id}):`);
            console.log(`   –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${item.title.substring(0, 50)}...`);
            console.log(`   –ò—Å—Ç–æ—á–Ω–∏–∫: ${item.source_name}`);
            console.log(`   –ú–µ–¥–∏–∞: ${media.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
            
            if (media.length > 0) {
                media.forEach((mediaItem, mediaIndex) => {
                    console.log(`     ${mediaIndex + 1}. –¢–∏–ø: ${mediaItem.type}`);
                    console.log(`        URL: ${mediaItem.url}`);
                    if (mediaItem.thumbnail) {
                        console.log(`        Thumbnail: ${mediaItem.thumbnail}`);
                    }
                });
            } else {
                console.log('     ‚ùå –ù–µ—Ç –º–µ–¥–∏–∞');
            }
            console.log('');
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
        console.log('üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...');
        try {
            const frontendResponse = await fetch('http://localhost:3000');
            if (frontendResponse.ok) {
                console.log('‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω');
            } else {
                console.log('‚ùå –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }
        } catch (error) {
            console.log('‚ùå –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ –∑–∞–ø—É—â–µ–Ω');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testFrontendData(); 