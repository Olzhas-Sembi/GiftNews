#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
"""

import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä—É
sys.path.append(os.path.join(os.path.dirname(__file__), 'server'))

from server.parsers.telegram_news_service import TelegramNewsService
from server.db import SessionLocal, NewsItem, NewsSource
from server.services.news_service import get_or_create_source

async def test_full_cycle():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –ø–∞—Ä—Å–∏–Ω–≥ -> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ -> –ø–æ–ª—É—á–µ–Ω–∏–µ"""
    
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
    service = TelegramNewsService()
    
    try:
        # 1. –ü–∞—Ä—Å–∏–º –∫–∞–Ω–∞–ª
        print("\nüì° –®–∞–≥ 1: –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ @nextgen_NFT...")
        posts = await service.fetch_telegram_channel('nextgen_NFT')
        
        if not posts:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã")
            return
            
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤")
        
        # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        print("\nüíæ –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        
        db = SessionLocal()
        try:
            saved_count = 0
            
            for post in posts[:5]:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–µ 5 –ø–æ—Å—Ç–æ–≤
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –∏—Å—Ç–æ—á–Ω–∏–∫
                    source = get_or_create_source(
                        db, 
                        post.get('source', 'NextGen NFT'), 
                        url=f"https://t.me/nextgen_NFT", 
                        source_type='telegram', 
                        category='nft'
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –Ω–æ–≤–æ—Å—Ç—å
                    existing = db.query(NewsItem).filter(
                        NewsItem.title == post['title']
                    ).first()
                    
                    if existing:
                        print(f"   ‚è≠Ô∏è  –ü–æ—Å—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {post['title'][:50]}...")
                        continue
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã–µ
                    image_url = None
                    video_url = None
                    
                    if post.get('media'):
                        if post['media']['type'] == 'photo':
                            image_url = post['media']['url']
                        elif post['media']['type'] == 'video':
                            video_url = post['media']['url']
                            if not image_url and post['media'].get('thumbnail'):
                                image_url = post['media']['thumbnail']
                    
                    # –ü–æ–ª—É—á–∞–µ–º HTML –∫–æ–Ω—Ç–µ–Ω—Ç
                    content_html = post.get('content_html', '')
                    
                    # –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —á—Ç–µ–Ω–∏—è
                    reading_time = post.get('reading_time', 1)
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å
                    news_item = NewsItem(
                        source_id=source.id,
                        title=post['title'],
                        content=post['text'],
                        content_html=content_html,
                        link=post['link'],
                        publish_date=datetime.fromisoformat(post['date'].replace('Z', '+00:00')),
                        category='nft',
                        image_url=image_url,
                        video_url=video_url,
                        reading_time=reading_time,
                        views_count=0,
                        author=post.get('source'),
                        subtitle=None
                    )
                    
                    db.add(news_item)
                    saved_count += 1
                    print(f"   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω: {post['title'][:50]}...")
                    
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
                    continue
            
            db.commit()
            print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤")
            
        finally:
            db.close()
        
        # 3. –ü–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print("\nüìñ –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
            recent_news = db.query(NewsItem).filter(
                NewsItem.category == 'nft'
            ).order_by(NewsItem.publish_date.desc()).limit(10).all()
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(recent_news)} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –ë–î")
            
            for i, news in enumerate(recent_news[:3], 1):
                print(f"\nüì∞ –ù–æ–≤–æ—Å—Ç—å #{i}:")
                print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {news.title}")
                print(f"   –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(news.content or '')} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"   HTML –∫–æ–Ω—Ç–µ–Ω—Ç: {len(news.content_html or '')} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"   –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è: {news.reading_time or 0} –º–∏–Ω")
                print(f"   –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {news.views_count or 0}")
                
                if news.image_url:
                    print(f"   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {news.image_url}")
                if news.video_url:
                    print(f"   –í–∏–¥–µ–æ: {news.video_url}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                preview = news.content[:100] + "..." if len(news.content) > 100 else news.content
                print(f"   –ü—Ä–µ–≤—å—é: {preview}")
                
        finally:
            db.close()
        
        print("\nüéâ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_full_cycle()) 