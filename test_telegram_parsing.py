#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ Telegram –∫–∞–Ω–∞–ª–∞ @nextgen_NFT
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä—É
sys.path.append(os.path.join(os.path.dirname(__file__), 'server'))

from server.parsers.telegram_news_service import TelegramNewsService

async def test_telegram_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ @nextgen_NFT"""
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞ @nextgen_NFT...")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
    service = TelegramNewsService()
    
    try:
        # –ü–∞—Ä—Å–∏–º –∫–∞–Ω–∞–ª
        posts = await service.fetch_telegram_channel('nextgen_NFT')
        
        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤")
        
        # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞
        for i, post in enumerate(posts[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –ø–æ—Å—Ç–æ–≤
            print(f"\nüìù –ü–æ—Å—Ç #{i}")
            print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {post['title'][:100]}...")
            print(f"   –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(post['text'])} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è: {post.get('reading_time', 'N/A')} –º–∏–Ω")
            print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {post['category']}")
            print(f"   –î–∞—Ç–∞: {post['date']}")
            
            if post.get('media'):
                print(f"   –ú–µ–¥–∏–∞: {post['media']['type']}")
                if post['media']['type'] == 'photo':
                    print(f"   –§–æ—Ç–æ URL: {post['media']['url']}")
                elif post['media']['type'] == 'video':
                    print(f"   –í–∏–¥–µ–æ URL: {post['media']['url']}")
                    print(f"   –ü—Ä–µ–≤—å—é: {post['media']['thumbnail']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞
            preview = post['text'][:200] + "..." if len(post['text']) > 200 else post['text']
            print(f"   –ü—Ä–µ–≤—å—é: {preview}")
            
            if post.get('content_html'):
                print(f"   HTML –∫–æ–Ω—Ç–µ–Ω—Ç: {len(post['content_html'])} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if posts:
            total_chars = sum(len(post['text']) for post in posts)
            avg_chars = total_chars / len(posts)
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –ø–æ—Å—Ç–∞: {avg_chars:.0f} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –û–±—â–∏–π –æ–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞: {total_chars} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–¥–∏–∞
            media_types = {}
            for post in posts:
                if post.get('media'):
                    media_type = post['media']['type']
                    media_types[media_type] = media_types.get(media_type, 0) + 1
            
            if media_types:
                print(f"   –ú–µ–¥–∏–∞: {media_types}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_telegram_parsing()) 